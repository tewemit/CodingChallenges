/*
 * 
 *  Coding Challenge : Fibonacci Factor

Given a number K, find the smallest Fibonacci number that shares a common factor( other than 1 ) with it. A number is said to be a common factor of two numbers if it exactly divides both of them. 
Output two separate numbers, F and D, where F is the smallest fibonacci number and D is the smallest number other than 1 which divides K and F.
Input Format 
First line of the input contains an integer T, the number of testcases.
Then follows T lines, each containing an integer K.
Output Format
Output T lines, each containing the required answer for each corresponding testcase.


Sample Input 
3
3
5
161
Sample Output
3 3
5 5
21 7
Explanation
There are three testcases. The first test case is 3, the smallest required fibonacci number  3. The second testcase is 5 and the third is 161. For 161 the smallest fibonacci numer sharing a common divisor with it is 21 and the smallest number other than 1 dividing 161 and 7 is 7.
Constraints :
1 <= T <= 5
2 <= K <= 1000,000
The required fibonacci number is guranteed to be less than 10^18.

Cleared all 10/10 cases with best time ever under 0.2 sec.
 * 
 */

import java.util.Iterator;
import java.util.LinkedList;
import java.util.Scanner;
 
public class FibonacciFactor {
   
 public static int T;
 public static int K[];
  
 public static LinkedList<Long> ll;
  
 public static void main(String[] args) 
 {
  Scanner in = new Scanner(System.in);
  ll = new LinkedList<Long> ();
   
  fib();
 
  T = in.nextInt();
   
  K = new int[T];
   
  Iterator ii = ll.iterator();
   
  for(int i=0;i<T;i++)
  {
   K[i] = in.nextInt();
  }
   
  for(int i=0;i<T;i++)
  {
   for(int j=2;j<=K[i];j++)
   {
    if(K[i] % j == 0)
    {
     ii.next();
     ii.next();
     while(ii.hasNext())
     {
      Long tmp = (Long) ii.next();
      if(tmp % j == 0)
      {
       System.out.println(tmp + " " + j);
       j = K[i] + 1;
       ii = ll.iterator();
       break;
      }
     }
    }
   }
  }
   
   
   
 }
  
 private static long fib() 
 {  
  long x1 = 0;
  long x2 = 1;
  long tmp;
  long max = (long) Math.pow(10, 18);
  while(true)
  {
   if(x1 >= max)
   {
    break;
   }
   x1=x1+x2;
   tmp=x2;
   x2=x1;
   x1=tmp;
   ll.add(x1);
  }
    return x1;
 }
 
}
